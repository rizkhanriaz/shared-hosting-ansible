---

- name: Create dedicated Apache httpd group
  group:
    name: "{{ httpd_group }}"
    state: present
  tags: [httpd, configure]

- name: Create dedicated Apache httpd user
  user:
    name: "{{ httpd_user }}"
    createhome: no
    group: "{{ httpd_group }}"
    state: present
    shell: /sbin/nologin
  tags: [httpd, configure]

- name: Configure Apache root directory
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerRoot {{ httpd_install_path }}"
    state: present
    regexp: '^#?ServerRoot'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache port
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Listen {{ httpd_port }}"
    state: present
    regexp: '^#?Listen'
  notify: restart httpd
  tags: [httpd, configure]

- name: Create the directories sites-available and sites-enabled
  file:
    path: "{{ httpd_install_path }}/conf/{{ item }}"
    state: directory
  with_items:
    - sites-enabled
    - sites-available
  notify: restart httpd
  tags: [httpd, configure]

- name: Add sites-enabled Include to httpd.conf
  lineinfile:
    dest: "{{ httpd_config_file }}"
    state: present
    line: 'IncludeOptional {{ httpd_install_path }}/conf/sites-enabled/*.conf'
  notify: restart httpd
  tags: [httpd, configure]

- name: Enable required modules
  lineinfile:
    path: "{{ httpd_config_file }}"
    regexp: "LoadModule {{ item }}_module modules/mod_{{ item }}.so"
    line: "LoadModule {{ item }}_module modules/mod_{{ item }}.so"
    state: present
    insertbefore: "<IfModule unixd_module>"
  with_items: "{{ httpd_active_modules }}"
  notify: restart httpd
  tags: [httpd, configure]

- name: Disable all other modules
  lineinfile:
    path: "{{ httpd_config_file }}"
    regexp: "LoadModule (?!{{ httpd_active_modules | join('|') }})"
    state: absent
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache httpd user
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "User {{ httpd_user }}"
    state: present
    regexp: '^#?User'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache httpd group
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Group {{ httpd_group }}"
    state: present
    regexp: '^#?Group'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache httpd server name
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerName {{ httpd_server_name }}"
    state: present
    regexp: '^#?ServerName'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Directory index
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "    DirectoryIndex {{ httpd_directory_index }}"
    state: present
    regexp: '^[ \t]+DirectoryIndex'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache httpd response tokens
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerTokens {{ httpd_server_tokens }}"
    state: present
    regexp: '^#?ServerTokens'
    insertbefore: EOF
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache httpd server signature
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerSignature {{ httpd_server_signature }}"
    state: present
    insertbefore: EOF
    regexp: '^#?ServerSignature'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure Apache httpd file tags
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "FileETag {{ httpd_file_etag }}"
    state: present
    insertbefore: EOF
    regexp: '^#?FileETag'
  notify: restart httpd
  tags: [httpd, configure]

- name: Make sure that MPM config is enabled
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Include conf/extra/httpd-mpm.conf"
    state: present
    regexp: '^#?Include\ conf\/extra/\httpd-mpm'
  notify: restart httpd
  tags: [httpd, configure]

- name: Configure MPM for Apache httpd
  replace:
    dest: "{{ httpd_install_path }}/conf/extra/httpd-mpm.conf"
    replace: "    {{ item.key }}  {{ item.value }}"
    regexp: '^[ \t]+{{ item.key }}(.+)$'
  notify: restart httpd
  with_items: "{{ httpd_mpm_config }}"
  tags: [httpd, configure]

- name: Add separate config file with deflate configuration
  template:
    src: httpd-deflate.conf.j2
    dest: "{{ httpd_install_path }}/conf/extra/httpd-deflate.conf"
    owner: root
    group: root
    mode: 0644
  when: "httpd_enable_gzip_compression == true"
  tags: [httpd, configure]

- name: Make sure that gzip compression is enabled
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Include conf/extra/httpd-deflate.conf"
    state: present
    regexp: '^#?Include\ conf\/extra/\httpd-deflate'
  notify: restart httpd
  when: "httpd_enable_gzip_compression == true"
  tags: [httpd, configure]

- name: Make sure that gzip compression is disabled
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "#Include conf/extra/httpd-deflate.conf"
    state: present
    regexp: '^#?Include\ conf\/extra/\httpd-deflate'
  notify: restart httpd
  when: "httpd_enable_gzip_compression == false"
  tags: [httpd, configure]

- name: Add separate config file with expires configuration
  template:
    src: httpd-expires.conf.j2
    dest: "{{ httpd_install_path }}/conf/extra/httpd-expires.conf"
    owner: root
    group: root
    mode: 0644
  when: "httpd_enable_expires_headers == true"
  tags: [httpd, configure]

- name: Make sure that expires headers are enabled
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Include conf/extra/httpd-expires.conf"
    state: present
    regexp: '^#?Include\ conf\/extra/\httpd-expires'
  notify: restart httpd
  when: "httpd_enable_expires_headers == true"
  tags: [httpd, configure]

- name: Make sure that expires headers are disabled
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "#Include conf/extra/httpd-expires.conf"
    state: present
    regexp: '^#?Include\ conf\/extra/\httpd-expires'
  notify: restart httpd
  when: "httpd_enable_expires_headers == false"
  tags: [httpd, configure]

- name: Enable recording real IP address
  blockinfile:
    path: "{{ httpd_config_file }}"
    block: |
      # Get real IP address
      <IfModule remoteip_module>
          RemoteIPHeader X-Forwarded-For
          RemoteIPInternalProxy 127.0.0.1
      </IfModule>
  when: "httpd_real_ip_recording == true"
  tags: [httpd, configure]

- name: Update common log format to log real IP address
  replace:
    path: "{{ httpd_config_file }}"
    replace: '    LogFormat "%a %l %u %t \"%r\" %>s %b" common'
    regexp: '^[ \t]+LogFormat.+?common$'
  notify: restart httpd
  when: "httpd_real_ip_recording == true"
  tags: [httpd, configure]

- name: Enabled extended status
  blockinfile:
    path: "{{ httpd_config_file }}"
    block: |
      # Enable extended status
      <IfModule status_module>
          ExtendedStatus On
      </IfModule>
  tags: [httpd, configure]
